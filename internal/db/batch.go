// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const archiveConversations = `-- name: ArchiveConversations :batchexec
UPDATE public.conversations
SET is_archive=true
WHERE conversation_id=$1
`

type ArchiveConversationsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) ArchiveConversations(ctx context.Context, conversationID []string) *ArchiveConversationsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range conversationID {
		vals := []interface{}{
			a,
		}
		batch.Queue(archiveConversations, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &ArchiveConversationsBatchResults{br, len(conversationID), false}
}

func (b *ArchiveConversationsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *ArchiveConversationsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const deleteConversations = `-- name: DeleteConversations :batchexec
UPDATE public.conversations
SET is_delete=true
WHERE conversation_id=$1
`

type DeleteConversationsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) DeleteConversations(ctx context.Context, conversationID []string) *DeleteConversationsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range conversationID {
		vals := []interface{}{
			a,
		}
		batch.Queue(deleteConversations, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &DeleteConversationsBatchResults{br, len(conversationID), false}
}

func (b *DeleteConversationsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *DeleteConversationsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const kickoutForConversation = `-- name: KickoutForConversation :batchexec
UPDATE public.conversation_session_id
SET is_kick_out=true
WHERE session_id = $1 AND conversation_id=$2
`

type KickoutForConversationBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type KickoutForConversationParams struct {
	SessionID      string
	ConversationID string
}

func (q *Queries) KickoutForConversation(ctx context.Context, arg []KickoutForConversationParams) *KickoutForConversationBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.SessionID,
			a.ConversationID,
		}
		batch.Queue(kickoutForConversation, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &KickoutForConversationBatchResults{br, len(arg), false}
}

func (b *KickoutForConversationBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *KickoutForConversationBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const saveMsgToDb = `-- name: SaveMsgToDb :batchexec
INSERT INTO public.messages
(msg_id, conversation_id, from_session, send_time, status, "type", "content")
VALUES($1, $2, $3, $4, $5, $6, $7)
`

type SaveMsgToDbBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type SaveMsgToDbParams struct {
	MsgID          string
	ConversationID string
	FromSession    int32
	SendTime       pgtype.Timestamp
	Status         int32
	Type           int32
	Content        *string
}

func (q *Queries) SaveMsgToDb(ctx context.Context, arg []SaveMsgToDbParams) *SaveMsgToDbBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.MsgID,
			a.ConversationID,
			a.FromSession,
			a.SendTime,
			a.Status,
			a.Type,
			a.Content,
		}
		batch.Queue(saveMsgToDb, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &SaveMsgToDbBatchResults{br, len(arg), false}
}

func (b *SaveMsgToDbBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *SaveMsgToDbBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const unArchiveConversations = `-- name: UnArchiveConversations :batchexec
UPDATE public.conversations
SET is_archive=false
WHERE conversation_id=$1
`

type UnArchiveConversationsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) UnArchiveConversations(ctx context.Context, conversationID []string) *UnArchiveConversationsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range conversationID {
		vals := []interface{}{
			a,
		}
		batch.Queue(unArchiveConversations, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UnArchiveConversationsBatchResults{br, len(conversationID), false}
}

func (b *UnArchiveConversationsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UnArchiveConversationsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
